<?xml version="1.0" standalone="no"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
    "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [

<!ENTITY version SYSTEM "version.xml">
]>

<refentry id="gdict-GdictContext">
<refmeta>
<refentrytitle role="top_of_page" id="gdict-GdictContext.top_of_page">GdictContext</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GDICT Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GdictContext</refname>
<refpurpose>Interface for dictionary transports</refpurpose>
</refnamediv>

<refsynopsisdiv id="gdict-GdictContext.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="GdictContextIface">GdictContextIface</link>;
enum                <link linkend="GdictContextError">GdictContextError</link>;
<link linkend="void">void</link>                <link linkend="gdict-context-set-local-only">gdict_context_set_local_only</link>        (<link linkend="GdictContext">GdictContext</link> *context,
                                                         <link linkend="gboolean">gboolean</link> local_only);
<link linkend="gboolean">gboolean</link>            <link linkend="gdict-context-get-local-only">gdict_context_get_local_only</link>        (<link linkend="GdictContext">GdictContext</link> *context);
<link linkend="gboolean">gboolean</link>            <link linkend="gdict-context-lookup-databases">gdict_context_lookup_databases</link>      (<link linkend="GdictContext">GdictContext</link> *context,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="gdict-context-lookup-strategies">gdict_context_lookup_strategies</link>     (<link linkend="GdictContext">GdictContext</link> *context,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="gdict-context-match-word">gdict_context_match_word</link>            (<link linkend="GdictContext">GdictContext</link> *context,
                                                         const <link linkend="gchar">gchar</link> *database,
                                                         const <link linkend="gchar">gchar</link> *strategy,
                                                         const <link linkend="gchar">gchar</link> *word,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="gdict-context-define-word">gdict_context_define_word</link>           (<link linkend="GdictContext">GdictContext</link> *context,
                                                         const <link linkend="gchar">gchar</link> *database,
                                                         const <link linkend="gchar">gchar</link> *word,
                                                         <link linkend="GError">GError</link> **error);

                    <link linkend="GdictDatabase">GdictDatabase</link>;
<link linkend="GdictDatabase">GdictDatabase</link> *     <link linkend="gdict-database-ref">gdict_database_ref</link>                  (<link linkend="GdictDatabase">GdictDatabase</link> *db);
<link linkend="void">void</link>                <link linkend="gdict-database-unref">gdict_database_unref</link>                (<link linkend="GdictDatabase">GdictDatabase</link> *db);
const <link linkend="gchar">gchar</link> *       <link linkend="gdict-database-get-name">gdict_database_get_name</link>             (<link linkend="GdictDatabase">GdictDatabase</link> *db);
const <link linkend="gchar">gchar</link> *       <link linkend="gdict-database-get-full-name">gdict_database_get_full_name</link>        (<link linkend="GdictDatabase">GdictDatabase</link> *db);

                    <link linkend="GdictStrategy">GdictStrategy</link>;
<link linkend="GdictStrategy">GdictStrategy</link> *     <link linkend="gdict-strategy-ref">gdict_strategy_ref</link>                  (<link linkend="GdictStrategy">GdictStrategy</link> *strat);
<link linkend="void">void</link>                <link linkend="gdict-strategy-unref">gdict_strategy_unref</link>                (<link linkend="GdictStrategy">GdictStrategy</link> *strat);
const <link linkend="gchar">gchar</link> *       <link linkend="gdict-strategy-get-name">gdict_strategy_get_name</link>             (<link linkend="GdictStrategy">GdictStrategy</link> *strat);
const <link linkend="gchar">gchar</link> *       <link linkend="gdict-strategy-get-description">gdict_strategy_get_description</link>      (<link linkend="GdictStrategy">GdictStrategy</link> *strat);

                    <link linkend="GdictMatch">GdictMatch</link>;
<link linkend="GdictMatch">GdictMatch</link> *        <link linkend="gdict-match-ref">gdict_match_ref</link>                     (<link linkend="GdictMatch">GdictMatch</link> *match);
<link linkend="void">void</link>                <link linkend="gdict-match-unref">gdict_match_unref</link>                   (<link linkend="GdictMatch">GdictMatch</link> *match);
const <link linkend="gchar">gchar</link> *       <link linkend="gdict-match-get-word">gdict_match_get_word</link>                (<link linkend="GdictMatch">GdictMatch</link> *match);
const <link linkend="gchar">gchar</link> *       <link linkend="gdict-match-get-database">gdict_match_get_database</link>            (<link linkend="GdictMatch">GdictMatch</link> *match);

                    <link linkend="GdictDefinition">GdictDefinition</link>;
<link linkend="GdictDefinition">GdictDefinition</link> *   <link linkend="gdict-definition-ref">gdict_definition_ref</link>                (<link linkend="GdictDefinition">GdictDefinition</link> *def);
<link linkend="void">void</link>                <link linkend="gdict-definition-unref">gdict_definition_unref</link>              (<link linkend="GdictDefinition">GdictDefinition</link> *def);
<link linkend="gint">gint</link>                <link linkend="gdict-definition-get-total">gdict_definition_get_total</link>          (<link linkend="GdictDefinition">GdictDefinition</link> *def);
const <link linkend="gchar">gchar</link> *       <link linkend="gdict-definition-get-word">gdict_definition_get_word</link>           (<link linkend="GdictDefinition">GdictDefinition</link> *def);
const <link linkend="gchar">gchar</link> *       <link linkend="gdict-definition-get-database">gdict_definition_get_database</link>       (<link linkend="GdictDefinition">GdictDefinition</link> *def);
const <link linkend="gchar">gchar</link> *       <link linkend="gdict-definition-get-text">gdict_definition_get_text</link>           (<link linkend="GdictDefinition">GdictDefinition</link> *def);
</synopsis>
</refsynopsisdiv>









<refsect1 id="gdict-GdictContext.description" role="desc">
<title role="desc.title">Description</title>
<para>
<link linkend="GdictContext"><type>GdictContext</type></link> is an interface used to uniformly access dictionary
transport objects. Each implementation of <link linkend="GdictContext"><type>GdictContext</type></link> must provide
functions for accessing the list of databases available on a dictionary
source and the available matching strategies; a function for retrieving
all words matching a given string, inside one (or more) of those databases
and using one of those strategies; a function for querying one (or more)
of those databases for a definition of a word.
</para>
<para>
Implementations of the <link linkend="GdictContext"><type>GdictContext</type></link> interface should query their
dictionary sources asynchronously; methods of the <link linkend="GdictContext"><type>GdictContext</type></link> interface
should return immediately, and each time a new database, strategy, match
or definition has been found, a signal should be fired by those
implementations.</para>
<para>
</para>
</refsect1>

<refsect1 id="gdict-GdictContext.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="GdictContextIface" role="struct">
<title>GdictContextIface</title>
<indexterm zone="GdictContextIface"><primary sortas="GdictContextIface">GdictContextIface</primary></indexterm><programlisting>typedef struct {
  /* methods, not signals */
  gboolean (*get_databases)     (GdictContext  *context,
  			         GError       **error);
  gboolean (*get_strategies)    (GdictContext  *context,
  			         GError       **error);
  gboolean (*match_word)        (GdictContext  *context,
  			         const gchar   *database,
  			         const gchar   *strategy,
  			         const gchar   *word,
  			         GError       **error);
  gboolean (*define_word)       (GdictContext  *context,
  			         const gchar   *database,
  			         const gchar   *word,
  			         GError       **error);  
  
  /* signals */
  void (*lookup_start)     (GdictContext    *context);
  void (*lookup_end)       (GdictContext    *context);
  
  void (*database_found)   (GdictContext    *context,
  			    GdictDatabase   *database);
  void (*strategy_found)   (GdictContext    *context,
  			    GdictStrategy   *strategy);
  void (*match_found)      (GdictContext    *context,
  			    GdictMatch      *match);
  void (*definition_found) (GdictContext    *context,
  			    GdictDefinition *definition);
  
  /* fired each time there's an error; the GError is owned
   * by the context, and should never be modified or freed
   */
  void (*error)            (GdictContext    *context,
  			    const GError    *error);
} GdictContextIface;
</programlisting>
<para>
Interface defintion</para>
<para>
</para></refsect2>
<refsect2 id="GdictContextError" role="enum">
<title>enum GdictContextError</title>
<indexterm zone="GdictContextError"><primary sortas="GdictContextError">GdictContextError</primary></indexterm><programlisting>typedef enum {
  GDICT_CONTEXT_ERROR_PARSE,
  GDICT_CONTEXT_ERROR_NOT_IMPLEMENTED,
  GDICT_CONTEXT_ERROR_INVALID_DATABASE,
  GDICT_CONTEXT_ERROR_INVALID_STRATEGY,
  GDICT_CONTEXT_ERROR_INVALID_COMMAND,
  GDICT_CONTEXT_ERROR_NO_MATCH,
  GDICT_CONTEXT_ERROR_NO_DATABASES,
  GDICT_CONTEXT_ERROR_NO_STRATEGIES
} GdictContextError;
</programlisting>
<para>
<link linkend="GdictContext"><type>GdictContext</type></link> error enumeration.</para>
<para>
</para></refsect2>
<refsect2 id="gdict-context-set-local-only" role="function" condition="since:1.0">
<title>gdict_context_set_local_only ()</title>
<indexterm zone="gdict-context-set-local-only" role="1.0"><primary sortas="gdict_context_set_local_only">gdict_context_set_local_only</primary></indexterm><programlisting><link linkend="void">void</link>                gdict_context_set_local_only        (<link linkend="GdictContext">GdictContext</link> *context,
                                                         <link linkend="gboolean">gboolean</link> local_only);</programlisting>
<para>
Sets whether only local resources will be used when querying for databases,
strategies, matches or definitions.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdictContext"><type>GdictContext</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>local_only</parameter>&#160;:</term>
<listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if only local resources will be used
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.0</para></refsect2>
<refsect2 id="gdict-context-get-local-only" role="function" condition="since:1.0">
<title>gdict_context_get_local_only ()</title>
<indexterm zone="gdict-context-get-local-only" role="1.0"><primary sortas="gdict_context_get_local_only">gdict_context_get_local_only</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gdict_context_get_local_only        (<link linkend="GdictContext">GdictContext</link> *context);</programlisting>
<para>
Gets whether only local resources will be used when querying.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdictContext"><type>GdictContext</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if only local resources will be used.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.0</para></refsect2>
<refsect2 id="gdict-context-lookup-databases" role="function" condition="since:1.0">
<title>gdict_context_lookup_databases ()</title>
<indexterm zone="gdict-context-lookup-databases" role="1.0"><primary sortas="gdict_context_lookup_databases">gdict_context_lookup_databases</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gdict_context_lookup_databases      (<link linkend="GdictContext">GdictContext</link> *context,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Query <parameter>context</parameter> for the list of databases available.  Each time a
database is found, the "database-found" signal is fired.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdictContext"><type>GdictContext</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> return location for a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the query was successfully started.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.0</para></refsect2>
<refsect2 id="gdict-context-lookup-strategies" role="function" condition="since:1.0">
<title>gdict_context_lookup_strategies ()</title>
<indexterm zone="gdict-context-lookup-strategies" role="1.0"><primary sortas="gdict_context_lookup_strategies">gdict_context_lookup_strategies</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gdict_context_lookup_strategies     (<link linkend="GdictContext">GdictContext</link> *context,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Query <parameter>context</parameter> for the list of matching strategies available.  Each
time a new strategy is found, the "strategy-found" signal is fired.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdictContext"><type>GdictContext</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> return location for a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the query was successfully started.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.0</para></refsect2>
<refsect2 id="gdict-context-match-word" role="function" condition="since:1.0">
<title>gdict_context_match_word ()</title>
<indexterm zone="gdict-context-match-word" role="1.0"><primary sortas="gdict_context_match_word">gdict_context_match_word</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gdict_context_match_word            (<link linkend="GdictContext">GdictContext</link> *context,
                                                         const <link linkend="gchar">gchar</link> *database,
                                                         const <link linkend="gchar">gchar</link> *strategy,
                                                         const <link linkend="gchar">gchar</link> *word,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Query <parameter>context</parameter> for a list of word matching <parameter>word</parameter> inside <parameter>database</parameter>,
using <parameter>strategy</parameter> as a matching strategy.  Each time a matching word
is found, the "match-found" signal is fired.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdictContext"><type>GdictContext</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>database</parameter>&#160;:</term>
<listitem><simpara> a database name to search into, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> for the
   default database
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>strategy</parameter>&#160;:</term>
<listitem><simpara> a strategy name to use for matching, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> for
   the default strategy
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>word</parameter>&#160;:</term>
<listitem><simpara> the word to match
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> return location for a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the query was successfully started.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.0</para></refsect2>
<refsect2 id="gdict-context-define-word" role="function" condition="since:1.0">
<title>gdict_context_define_word ()</title>
<indexterm zone="gdict-context-define-word" role="1.0"><primary sortas="gdict_context_define_word">gdict_context_define_word</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gdict_context_define_word           (<link linkend="GdictContext">GdictContext</link> *context,
                                                         const <link linkend="gchar">gchar</link> *database,
                                                         const <link linkend="gchar">gchar</link> *word,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Query <parameter>context</parameter> for a list of definitions of <parameter>word</parameter> inside <parameter>database</parameter>.  Each
time a new definition is found, the "definition-found" signal is fired.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>context</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdictContext"><type>GdictContext</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>database</parameter>&#160;:</term>
<listitem><simpara> a database name to search into, or <link linkend="NULL--CAPS"><literal>NULL</literal></link> for the
   default database
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>word</parameter>&#160;:</term>
<listitem><simpara> the word to search
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> return location for a <link linkend="GError"><type>GError</type></link>, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the query was successfully sent.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.0</para></refsect2>
<refsect2 id="GdictDatabase" role="struct">
<title>GdictDatabase</title>
<indexterm zone="GdictDatabase"><primary sortas="GdictDatabase">GdictDatabase</primary></indexterm><programlisting>typedef struct _GdictDatabase GdictDatabase;</programlisting>
<para>
A <link linkend="GdictDatabase"><type>GdictDatabase</type></link> represents a database inside a dictionary source.
</para>
<para>
The <link linkend="GdictDatabase"><type>GdictDatabase</type></link> structure is private and should only be accessed
using the available functions.</para>
<para>
</para></refsect2>
<refsect2 id="gdict-database-ref" role="function" condition="since:1.0">
<title>gdict_database_ref ()</title>
<indexterm zone="gdict-database-ref" role="1.0"><primary sortas="gdict_database_ref">gdict_database_ref</primary></indexterm><programlisting><link linkend="GdictDatabase">GdictDatabase</link> *     gdict_database_ref                  (<link linkend="GdictDatabase">GdictDatabase</link> *db);</programlisting>
<para>
Increases the reference count of <parameter>db</parameter> by one.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>db</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdictDatabase"><type>GdictDatabase</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <parameter>db</parameter> with its reference count increased

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.0</para></refsect2>
<refsect2 id="gdict-database-unref" role="function" condition="since:1.0">
<title>gdict_database_unref ()</title>
<indexterm zone="gdict-database-unref" role="1.0"><primary sortas="gdict_database_unref">gdict_database_unref</primary></indexterm><programlisting><link linkend="void">void</link>                gdict_database_unref                (<link linkend="GdictDatabase">GdictDatabase</link> *db);</programlisting>
<para>
Decreases the reference count of <parameter>db</parameter> by one.  If the reference count reaches
zero, <parameter>db</parameter> is destroyed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>db</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdictDatabase"><type>GdictDatabase</type></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.0</para></refsect2>
<refsect2 id="gdict-database-get-name" role="function" condition="since:1.0">
<title>gdict_database_get_name ()</title>
<indexterm zone="gdict-database-get-name" role="1.0"><primary sortas="gdict_database_get_name">gdict_database_get_name</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       gdict_database_get_name             (<link linkend="GdictDatabase">GdictDatabase</link> *db);</programlisting>
<para>
Gets the short name of the database, to be used with functions like
<link linkend="gdict-context-match-word"><function>gdict_context_match_word()</function></link> or <link linkend="gdict-context-define-word"><function>gdict_context_define_word()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>db</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdictDatabase"><type>GdictDatabase</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the short name of the database.  The string is owned by
  the <link linkend="GdictDatabase"><type>GdictDatabase</type></link> object, and should never be modified or freed.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.0</para></refsect2>
<refsect2 id="gdict-database-get-full-name" role="function" condition="since:1.0">
<title>gdict_database_get_full_name ()</title>
<indexterm zone="gdict-database-get-full-name" role="1.0"><primary sortas="gdict_database_get_full_name">gdict_database_get_full_name</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       gdict_database_get_full_name        (<link linkend="GdictDatabase">GdictDatabase</link> *db);</programlisting>
<para>
Gets the full name of the database, suitable for display.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>db</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdictDatabase"><type>GdictDatabase</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the full name of the database.  The string is owned by
  the <link linkend="GdictDatabase"><type>GdictDatabase</type></link> object, and should never be modified or freed.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.0</para></refsect2>
<refsect2 id="GdictStrategy" role="struct">
<title>GdictStrategy</title>
<indexterm zone="GdictStrategy"><primary sortas="GdictStrategy">GdictStrategy</primary></indexterm><programlisting>typedef struct _GdictStrategy GdictStrategy;</programlisting>
<para>
A <link linkend="GdictStrategy"><type>GdictStrategy</type></link> represents a matching strategy implemented by
a dictionary source.
</para>
<para>
The <link linkend="GdictStrategy"><type>GdictStrategy</type></link> structure is private and should only be accessed
using the available functions.</para>
<para>
</para></refsect2>
<refsect2 id="gdict-strategy-ref" role="function" condition="since:1.0">
<title>gdict_strategy_ref ()</title>
<indexterm zone="gdict-strategy-ref" role="1.0"><primary sortas="gdict_strategy_ref">gdict_strategy_ref</primary></indexterm><programlisting><link linkend="GdictStrategy">GdictStrategy</link> *     gdict_strategy_ref                  (<link linkend="GdictStrategy">GdictStrategy</link> *strat);</programlisting>
<para>
Increases the reference count of <parameter>strat</parameter> by one.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>strat</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdictStrategy"><type>GdictStrategy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the <link linkend="GdictStrategy"><type>GdictStrategy</type></link> object  with its reference count
  increased

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.0</para></refsect2>
<refsect2 id="gdict-strategy-unref" role="function" condition="since:1.0">
<title>gdict_strategy_unref ()</title>
<indexterm zone="gdict-strategy-unref" role="1.0"><primary sortas="gdict_strategy_unref">gdict_strategy_unref</primary></indexterm><programlisting><link linkend="void">void</link>                gdict_strategy_unref                (<link linkend="GdictStrategy">GdictStrategy</link> *strat);</programlisting>
<para>
Decreases the reference count of <parameter>strat</parameter> by one.  If the reference count
reaches zero, the <link linkend="GdictStrategy"><type>GdictStrategy</type></link> object is freed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>strat</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdictStrategy"><type>GdictStrategy</type></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.0</para></refsect2>
<refsect2 id="gdict-strategy-get-name" role="function" condition="since:1.0">
<title>gdict_strategy_get_name ()</title>
<indexterm zone="gdict-strategy-get-name" role="1.0"><primary sortas="gdict_strategy_get_name">gdict_strategy_get_name</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       gdict_strategy_get_name             (<link linkend="GdictStrategy">GdictStrategy</link> *strat);</programlisting>
<para>
FIXME</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>strat</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdictStrategy"><type>GdictStrategy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> FIXME

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.0</para></refsect2>
<refsect2 id="gdict-strategy-get-description" role="function" condition="since:1.0">
<title>gdict_strategy_get_description ()</title>
<indexterm zone="gdict-strategy-get-description" role="1.0"><primary sortas="gdict_strategy_get_description">gdict_strategy_get_description</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       gdict_strategy_get_description      (<link linkend="GdictStrategy">GdictStrategy</link> *strat);</programlisting>
<para>
FIXME</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>strat</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdictStrategy"><type>GdictStrategy</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> FIXME

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.0</para></refsect2>
<refsect2 id="GdictMatch" role="struct">
<title>GdictMatch</title>
<indexterm zone="GdictMatch"><primary sortas="GdictMatch">GdictMatch</primary></indexterm><programlisting>typedef struct _GdictMatch GdictMatch;</programlisting>
<para>
A <link linkend="GdictMatch"><type>GdictMatch</type></link> represents a single match for the searched word.
</para>
<para>
The <link linkend="GdictMatch"><type>GdictMatch</type></link> structure is private and should only be accessed
using the available functions.</para>
<para>
</para></refsect2>
<refsect2 id="gdict-match-ref" role="function" condition="since:1.0">
<title>gdict_match_ref ()</title>
<indexterm zone="gdict-match-ref" role="1.0"><primary sortas="gdict_match_ref">gdict_match_ref</primary></indexterm><programlisting><link linkend="GdictMatch">GdictMatch</link> *        gdict_match_ref                     (<link linkend="GdictMatch">GdictMatch</link> *match);</programlisting>
<para>
FIXME</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>match</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdictMatch"><type>GdictMatch</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> FIXME

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.0</para></refsect2>
<refsect2 id="gdict-match-unref" role="function" condition="since:1.0">
<title>gdict_match_unref ()</title>
<indexterm zone="gdict-match-unref" role="1.0"><primary sortas="gdict_match_unref">gdict_match_unref</primary></indexterm><programlisting><link linkend="void">void</link>                gdict_match_unref                   (<link linkend="GdictMatch">GdictMatch</link> *match);</programlisting>
<para>
FIXME</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>match</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdictMatch"><type>GdictMatch</type></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.0</para></refsect2>
<refsect2 id="gdict-match-get-word" role="function" condition="since:1.0">
<title>gdict_match_get_word ()</title>
<indexterm zone="gdict-match-get-word" role="1.0"><primary sortas="gdict_match_get_word">gdict_match_get_word</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       gdict_match_get_word                (<link linkend="GdictMatch">GdictMatch</link> *match);</programlisting>
<para>
FIXME</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>match</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdictMatch"><type>GdictMatch</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> FIXME

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.0</para></refsect2>
<refsect2 id="gdict-match-get-database" role="function" condition="since:1.0">
<title>gdict_match_get_database ()</title>
<indexterm zone="gdict-match-get-database" role="1.0"><primary sortas="gdict_match_get_database">gdict_match_get_database</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       gdict_match_get_database            (<link linkend="GdictMatch">GdictMatch</link> *match);</programlisting>
<para>
FIXME</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>match</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdictMatch"><type>GdictMatch</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> FIXME

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.0</para></refsect2>
<refsect2 id="GdictDefinition" role="struct">
<title>GdictDefinition</title>
<indexterm zone="GdictDefinition"><primary sortas="GdictDefinition">GdictDefinition</primary></indexterm><programlisting>typedef struct _GdictDefinition GdictDefinition;</programlisting>
<para>
A <link linkend="GdictDefinition"><type>GdictDefinition</type></link> represents a single definition for the searched
word.
</para>
<para>
The <link linkend="GdictDefinition"><type>GdictDefinition</type></link> structure is private and should only be
accessed using the available functions.</para>
<para>
</para></refsect2>
<refsect2 id="gdict-definition-ref" role="function" condition="since:1.0">
<title>gdict_definition_ref ()</title>
<indexterm zone="gdict-definition-ref" role="1.0"><primary sortas="gdict_definition_ref">gdict_definition_ref</primary></indexterm><programlisting><link linkend="GdictDefinition">GdictDefinition</link> *   gdict_definition_ref                (<link linkend="GdictDefinition">GdictDefinition</link> *def);</programlisting>
<para>
Increases the reference count of <parameter>def</parameter> by one.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>def</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdictDefinition"><type>GdictDefinition</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the <link linkend="GdictDefinition"><type>GdictDefinition</type></link> object with its reference count
  increased.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.0</para></refsect2>
<refsect2 id="gdict-definition-unref" role="function" condition="since:1.0">
<title>gdict_definition_unref ()</title>
<indexterm zone="gdict-definition-unref" role="1.0"><primary sortas="gdict_definition_unref">gdict_definition_unref</primary></indexterm><programlisting><link linkend="void">void</link>                gdict_definition_unref              (<link linkend="GdictDefinition">GdictDefinition</link> *def);</programlisting>
<para>
Decreases the reference count of <parameter>def</parameter> by one.  If the reference count
reaches zero, the <link linkend="GdictDefinition"><type>GdictDefinition</type></link> object is freed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>def</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdictDefinition"><type>GdictDefinition</type></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.0</para></refsect2>
<refsect2 id="gdict-definition-get-total" role="function" condition="since:1.0">
<title>gdict_definition_get_total ()</title>
<indexterm zone="gdict-definition-get-total" role="1.0"><primary sortas="gdict_definition_get_total">gdict_definition_get_total</primary></indexterm><programlisting><link linkend="gint">gint</link>                gdict_definition_get_total          (<link linkend="GdictDefinition">GdictDefinition</link> *def);</programlisting>
<para>
Retrieves the total number of definitions that were found on a
dictionary.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>def</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdictDefinition"><type>GdictDefinition</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the number of definitions.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.0</para></refsect2>
<refsect2 id="gdict-definition-get-word" role="function" condition="since:1.0">
<title>gdict_definition_get_word ()</title>
<indexterm zone="gdict-definition-get-word" role="1.0"><primary sortas="gdict_definition_get_word">gdict_definition_get_word</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       gdict_definition_get_word           (<link linkend="GdictDefinition">GdictDefinition</link> *def);</programlisting>
<para>
Retrieves the word used by the dictionary database to store
the definition.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>def</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdictDefinition"><type>GdictDefinition</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a word.  The returned string is owned by the
  <link linkend="GdictDefinition"><type>GdictDefinition</type></link> object and should not be modified or freed.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.0</para></refsect2>
<refsect2 id="gdict-definition-get-database" role="function" condition="since:1.0">
<title>gdict_definition_get_database ()</title>
<indexterm zone="gdict-definition-get-database" role="1.0"><primary sortas="gdict_definition_get_database">gdict_definition_get_database</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       gdict_definition_get_database       (<link linkend="GdictDefinition">GdictDefinition</link> *def);</programlisting>
<para>
Retrieves the full name of the dictionary database where the
definition is stored.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>def</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdictDefinition"><type>GdictDefinition</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the full name of a database.  The returned string
  is owned by the <link linkend="GdictDefinition"><type>GdictDefinition</type></link> object and should not be
  modified or freed.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.0</para></refsect2>
<refsect2 id="gdict-definition-get-text" role="function" condition="since:1.0">
<title>gdict_definition_get_text ()</title>
<indexterm zone="gdict-definition-get-text" role="1.0"><primary sortas="gdict_definition_get_text">gdict_definition_get_text</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       gdict_definition_get_text           (<link linkend="GdictDefinition">GdictDefinition</link> *def);</programlisting>
<para>
Retrieves the text of the definition.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>def</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GdictDefinition"><type>GdictDefinition</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the text of the definition.  The returned string
  is owned by the <link linkend="GdictDefinition"><type>GdictDefinition</type></link> object, and should not be
  modified or freed.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.0</para></refsect2>

</refsect1>




</refentry>
